/*! zpa um-v1.2.0 */
(function (root, factory) {
  if (typeof module !== 'undefined' && module.exports) {
    module.exports = factory();
  } else if (typeof define === 'function' && (define.amd || define.cmd)) {
    define(factory);
  } else {
    root.ZaloPayUM = root.ZaloPayUM || {};
    factory.call(root, root.ZaloPayUM);
  }
})(this, function (ZaloPayUM) {
  ZaloPayUM = ZaloPayUM || {};
  ZaloPayUM.ua = navigator.userAgent;
  ZaloPayUM.jsVersion = '1.0.0';
  ZaloPayUM.isDebug = true;
  ZaloPayUM.isZaloPayUM = (function () {
    return ZaloPayUM.ua.indexOf('ZaloPayClient') > -1;
  })();
  if (!ZaloPayUM.isZaloPayUM) {
    writeLog('warn', 'Run in ZaloPayClient please!');
  }

  ZaloPayUM.appVersion = (function () {
    if (ZaloPayUM.isZaloPayUM) {
      var version = ZaloPayUM.ua.match(/ZaloPayClient\/(.*)/);
      return version && version.length ? version[1] : '';
    }
  })();

  ZaloPayUM.appInfo = {
    name: 'ZaloPayUM',
    isZaloPayUM: ZaloPayUM.isZaloPayUM,
    jsVersion: ZaloPayUM.jsVersion,
    appVersion: ZaloPayUM.appVersion,
  };

  ZaloPayUM.on = function (event, fn) {
    event.split(/\s+/g).forEach(function (eventName) {
      document.addEventListener(eventName, fn, false);
    });
  };

  ZaloPayUM.call = function () {
    var args = [].slice.call(arguments);
    if (isJsBridgeAvailable()) {
      var name = args[0],
        opt = args[1] || {},
        cb = args[2];
      if (!isStr(name)) {
        writeLog('error', 'ZaloPayUM.call', 'Request undefined function!');
        return;
      }
      if (cb === undefined && isFn(opt)) {
        cb = opt;
        opt = {};
      }
      if (!isObj(opt)) {
        writeLog('error', 'ZaloPayUM.call', 'Request undefined options!');
        return;
      }
      var _callback = cb;
      cb = function (result) {
        // for api without callback, don't care result, prevent loop infinity on android
        if (_callback) {
          result = checkError(result, name);
          _callback(result);
        }
      };
      'writeLog' !== name && writeLog('info', 'ZaloPayJSBridge.call', name, opt, _callback);

      window.ZaloPayJSBridge.call(name, opt, cb);
    } else {
      ZaloPayUM._apiQueue = ZaloPayUM._apiQueue || [];
      ZaloPayUM._apiQueue.push(args);
    }
  };

  ZaloPayUM._ready = function (fn) {
    if (window.ZaloPayJSBridge && window.ZaloPayJSBridge.call) {
      fn && fn();
    } else {
      ZaloPayUM.on('ZaloPayJSBridge', fn);
    }
  };

  ZaloPayUM.ready = ZaloPayUM.ready || ZaloPayUM._ready;

  /**
   * ZaloPayUM.showLoading();
   */
  ZaloPayUM.showLoading = function () {
    ZaloPayUM.call('showLoading');
  };

  /**
   * ZaloPayUM.hideLoading();
   */
  ZaloPayUM.hideLoading = function () {
    ZaloPayUM.call('hideLoading');
  };

  /**
   * ZaloPayUM.closeWindow();
   */
  ZaloPayUM.closeWindow = function () {
    ZaloPayUM.call('closeWindow');
  };

  /*
   * Launch deep links from ZPA
   * Eg: url = zalopay://launch/f/resetpin
   */
  ZaloPayUM.launchDeeplink = function (opt, cb) {
    if (!isObj(opt)) {
      writeLog('error', 'ZaloPayUM.launchDeeplink', 'Received invalid object');
      return;
    }

    if (isStr(opt.url)) {
      opt = {
        url: opt.url,
      };

      ZaloPayUM.call('launchDeeplink', opt, cb);
      writeLog('info', 'ZaloPayUM.launchDeeplink', 'Received obj', opt);
      return;
    }

    writeLog('error', 'ZaloPayUM.launchDeeplink', 'Missing require param: url');
  };

  ZaloPayUM._ready(function () {
    writeLog('info', 'ZaloPayUM JS Bridge Ready!');
    var apiQueue = ZaloPayUM._apiQueue || [];

    function next() {
      ZaloPayUM.requestAnimationFrame(function () {
        var args = apiQueue.shift();
        ZaloPayUM.call.apply(null, args);
        if (apiQueue.length) next();
      });
    }
    !!apiQueue.length && next();
  });

  ['showLoading', 'hideLoading', 'closeWindow', 'launchDeeplink'].forEach(
    function (methodName) {
      ZaloPayUM[methodName] = function () {
        var args = [].slice.call(arguments);
        ZaloPayUM.call.apply(null, [methodName].concat(args));
      };
    },
  );

  function isAndroid() {
    return /android/i.test(ZaloPayUM.ua);
  }

  function isIOS() {
    return /iphone|ipad|ipod/i.test(ZaloPayUM.ua);
  }

  function isArr(fn) {
    return 'array' === type(fn);
  }

  function isFn(fn) {
    return 'function' === type(fn);
  }

  function isStr(str) {
    return 'string' === type(str);
  }

  function isObj(o) {
    return 'object' === type(o);
  }

  function isNumber(num) {
    return 'number' === type(num);
  }

  function type(obj) {
    return Object.prototype.toString
      .call(obj)
      .replace(/\[object (\w+)\]/, '$1')
      .toLowerCase();
  }

  function writeLog() {
    var time = +new Date();
    var arg = [].slice.call(arguments);
    var type = arg[0].toLowerCase().trim();
    switch (type) {
      case 'error':
        arg.splice(0, 1);
        arg.length === 1 ? console.error(time, arg[0]) : console.error(time, arg);
        break;
      case 'warn':
        arg.splice(0, 1);
        arg.length === 1 ? console.warn(time, arg[0]) : console.warn(time, arg);
        break;
      case 'info':
        arg.splice(0, 1);
        arg.length === 1 ? console.log(time, arg[0]) : console.log(time, arg);
        break;
      default:
        type = 'info';
        arg.length === 1 ? console.log(time, arg[0]) : console.log(time, arg);
        break;
    }
    if (ZaloPayUM.isDebug && ZaloPayUM.call && isJsBridgeAvailable()) {
      var opt = {
        type: type,
        time: time,
        data: JSON.stringify(arg),
      };
      ZaloPayUM.call('writeLog', opt);
    }
  }

  function checkError(result, name) {
    result = result || {};
    result.errorCode = result.error || 0;
    if (result.error !== 1) {
      writeLog('error', name + ': errorCode[' + result.errorCode + '], message[' + result.errorMessage + ']');
    } else {
      writeLog('info', name + ': errorCode[' + result.errorCode + '], message[' + result.errorMessage + ']');
    }
    return result;
  }

  function compareVersion(targetVersion) {
    var appVersion = ZaloPayUM.appVersion.split('.');
    targetVersion = targetVersion.split('.');
    for (var i = 0, n1, n2; i < appVersion.length; i++) {
      n1 = parseInt(targetVersion[i], 10) || 0;
      n2 = parseInt(appVersion[i], 10) || 0;
      if (n1 > n2) return -1;
      if (n1 < n2) return 1;
    }
    return 0;
  }

  function isJsBridgeAvailable() {
    return window.ZaloPayJSBridge && window.ZaloPayJSBridge.call;
  }
  return ZaloPayUM;
});
