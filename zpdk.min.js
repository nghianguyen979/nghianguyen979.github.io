/*! zpdk 12-07-2019 */
(function (root, factory) {
  if (typeof module !== 'undefined' && module.exports) {
    module.exports = factory();
  } else if (typeof define === 'function' && (define.amd || define.cmd)) {
    define(factory);
  } else {
    root.ZaloPay = root.ZaloPay || {};
    factory.call(root, root.ZaloPay);
  }
})(this, function (ZaloPay) {

  ZaloPay = ZaloPay || {};
  ZaloPay.ua = navigator.userAgent;
  ZaloPay.jsVersion = '1.0.0';
  ZaloPay.isDebug = true;
  ZaloPay.isZaloPay = (function () {
    return ZaloPay.ua.indexOf('ZaloPayClient') > -1;
  })();
  if (!ZaloPay.isZaloPay) {
    writeLog('warn', 'Run in ZaloPayClient please!');
  }
  ZaloPay.appVersion = (function () {
    if (ZaloPay.isZaloPay) {
      var version = ZaloPay.ua.match(/ZaloPayClient\/(.*)/);
      return version && version.length ? version[1] : '';
    }
  })();
  ZaloPay.appInfo = {
    name: 'ZaloPay',
    isZaloPay: ZaloPay.isZaloPay,
    jsVersion: ZaloPay.jsVersion,
    appVersion: ZaloPay.appVersion
  };
  ZaloPay.on = function (event, fn) {
    event.split(/\s+/g).forEach(function (eventName) {
      document.addEventListener(eventName, fn, false);
    });
  };
  ZaloPay.call = function () {
    var args = [].slice.call(arguments);
    if (window.ZaloPayJSBridge && window.ZaloPayJSBridge.call) {
      var name = args[0],
        opt = args[1] || {},
        cb = args[2];
      if (!isStr(name)) {
        writeLog('error', 'ZaloPay.call', 'Request undefined function!');
        return;
      }
      if (cb === undefined && isFn(opt)) {
        cb = opt;
        opt = {};
      }
      if (!isObj(opt)) {
        writeLog('error', 'ZaloPay.call', 'Request undefined options!');
        return;
      }
      var _callback = cb;
      cb = function (result) {
        // for api without callback, don't care result, prevent loop infinity on android
        if (_callback) {
          result = checkError(result, name);
          _callback(result);
        }
      };
      'writeLog' !== name &&
        writeLog('info', 'ZaloPayJSBridge.call', name, opt, _callback);
      window.ZaloPayJSBridge.call(name, opt, cb);
    } else {
      ZaloPay._apiQueue = ZaloPay._apiQueue || [];
      ZaloPay._apiQueue.push(args);
    }
  };
  ZaloPay._ready = function (fn) {
    if (window.ZaloPayJSBridge && window.ZaloPayJSBridge.call) {
      fn && fn();
    } else {
      ZaloPay.on('ZaloPayJSBridgeReady', fn);
    }
  };
  ZaloPay.ready = ZaloPay.ready || ZaloPay._ready;

  /**
   * ZaloPay.showLoading();
   */
  ZaloPay.showLoading = function () {
    ZaloPay.call('showLoading');
  };

  /**
   * ZaloPay.hideLoading();
   */
  ZaloPay.hideLoading = function () {
    ZaloPay.call('hideLoading');
  };

  /**
   * ZaloPay.closeWindow();
   */
  ZaloPay.closeWindow = function () {
    ZaloPay.call('closeWindow');
  };
  
  ZaloPay.showDialog = function (opt) {
    if (!isObj(opt)) {
      writeLog('error', 'ZaloPay.showDialog', 'Received invalid object');
      return;
    }
    if (isStr(opt.title) && isStr(opt.message) && isStr(opt.positivebutton) && isStr(opt.negativebutton)) {
      opt = {
        title: opt.title,
        message: opt.message,
        positivebutton: opt.positivebutton,
        negativebutton: opt.negativebutton
      };
      ZaloPay.call('showDialog', opt);
    }
  };
  
    ZaloPay.setToolbarColor = function (opt) {
    if (!isObj(opt)) {
      writeLog('error', 'ZaloPay.setToolbarColor', 'Received invalid object');
      return;
    }
    if (isStr(opt.backgroundcolor) && isStr(opt.titlecolor)) {
      opt = {
        backgroundcolor: opt.backgroundcolor,
        titlecolor: opt.titlecolor
      };
      ZaloPay.call('setToolbarColor', opt);
    }
  };
  
  ZaloPay.payOrder = function (opt, cb) {
    if (!isObj(opt)) {
      writeLog('error', 'ZaloPay.payOrder', 'Received invalid object');
      return;
    }
    if (isStr(opt.zptranstoken)) {
      opt = {
        zptranstoken: opt.zptranstoken,
        appid: opt.appid
      };
      writeLog('info', 'ZaloPay.payOrder', 'Received zptranstoken', opt);
      ZaloPay.call('payOrder', opt, cb);
      return;
    } 
    writeLog('error', 'ZaloPay.payOrder', 'Received missing require param!');
  };
  
   ZaloPay.paymentCallback = function (opt, cb) {
    if (!isObj(opt)) {
      writeLog('error', 'ZaloPay.paymentCallback', 'Received invalid object');
      return;
    }
    if (isStr(opt.zptranstoken) && isStr(opt.returncode) && isStr(opt.returnmessage)) {
      opt = {
        returncode: opt.returncode,
        returnmessage: opt.returnmessage,
        zptranstoken: opt.zptranstoken
      };
      writeLog('info', 'ZaloPay.paymentCallback', 'Received zptranstoken', opt);
      ZaloPay.call('paymentCallback', opt, cb);
      return;
    } 
    writeLog('error', 'ZaloPay.paymentCallback', 'Received missing require param!');
  };

  ZaloPay.launchZaloPayApp = function () {
    ZaloPay.call('launchZaloPayApp');
  };
  
  ZaloPay.checkInstallZaloPay = function (cb) {
    ZaloPay.call('checkInstallZaloPay', cb);
  };
  
  ZaloPay.getZPDKCommon = function (cb) {
    ZaloPay.call('getZPDKCommon', cb);
  };
 
  ZaloPay.forgotPassword = function (cb) {
    ZaloPay.call('forgotPassword', cb);
  };
  
  ZaloPay.setCancelButtonVisibility = function (opt) {
    if (!isObj(opt)) {
      writeLog('error', 'ZaloPay.setExistButtonVisibility', 'Received invalid object');
      return;
    }
    if (isStr(opt.isshow)) {
      opt = {
        isshow: opt.isshow
      };
      ZaloPay.call('setCancelButtonVisibility', opt);
    }
  };
  
  ZaloPay.navigateToStore = function (cb) {
    ZaloPay.call('navigateToStore', cb);
  };

  ZaloPay._ready(function () {
    writeLog('info', 'ZaloPayJS Ready!');
    var apiQueue = ZaloPay._apiQueue || [];

    function next() {
      ZaloPay.requestAnimationFrame(function () {
        var args = apiQueue.shift();
        ZaloPay.call.apply(null, args);
        if (apiQueue.length) next();
      });
    }
    !!apiQueue.length && next();
  });

  [
    'showLoading',
    'hideLoading',
    'closeWindow',
    'showDialog',
    'payOrder',
    'setToolbarColor',
    'paymentCallback',
    'forgotPassword',
    'launchZaloPayApp',
    'checkInstallZaloPay',
    'getZPDKCommon',
    'setCancelButtonVisibility',
    'navigateToStore'
  ].forEach(function (methodName) {
    ZaloPay[methodName] = function () {
      var args = [].slice.call(arguments);
      ZaloPay.call.apply(null, [methodName].concat(args));
    };
  });

  function isAndroid() {
    return /android/i.test(ZaloPay.ua);
  }

  function isIOS() {
    return /iphone|ipad|ipod/i.test(ZaloPay.ua);
  }

  function isArr(fn) {
    return 'array' === type(fn);
  }

  function isFn(fn) {
    return 'function' === type(fn);
  }

  function isStr(str) {
    return 'string' === type(str);
  }

  function isObj(o) {
    return 'object' === type(o);
  }

  function isNumber(num) {
    return 'number' === type(num);
  }

  function type(obj) {
    return Object.prototype.toString
      .call(obj)
      .replace(/\[object (\w+)\]/, '$1')
      .toLowerCase();
  }

  function writeLog() {
    var time = +new Date();
    var arg = [].slice.call(arguments);
    var type = arg[0].toLowerCase().trim();
    switch (type) {
      case 'error':
        arg.splice(0, 1);
        arg.length === 1
          ? console.error(time, arg[0])
          : console.error(time, arg);
        break;
      case 'warn':
        arg.splice(0, 1);
        arg.length === 1 ? console.warn(time, arg[0]) : console.warn(time, arg);
        break;
      case 'info':
        arg.splice(0, 1);
        arg.length === 1 ? console.log(time, arg[0]) : console.log(time, arg);
        break;
      default:
        type = 'info';
        arg.length === 1 ? console.log(time, arg[0]) : console.log(time, arg);
        break;
    }
    if (
      ZaloPay.isDebug &&
      ZaloPay.call &&
      window.ZaloPayJSBridge &&
      window.ZaloPayJSBridge.call
    ) {
      var opt = {
        type: type,
        time: time,
        data: JSON.stringify(arg)
      };
      ZaloPay.call('writeLog', opt);
    }
  }

  function checkError(result, name) {
    result = result || {};
    result.errorCode = result.error || 0;
    if (result.error !== 1) {
      writeLog(
        'error',
        name +
        ': errorCode[' +
        result.errorCode +
        '], message[' +
        result.errorMessage +
        ']'
      );
    } else {
      writeLog(
        'info',
        name +
        ': errorCode[' +
        result.errorCode +
        '], message[' +
        result.errorMessage +
        ']'
      );
    }
    return result;
  }

  function compareVersion(targetVersion) {
    var appVersion = ZaloPay.appVersion.split('.');
    targetVersion = targetVersion.split('.');
    for (var i = 0, n1, n2; i < appVersion.length; i++) {
      n1 = parseInt(targetVersion[i], 10) || 0;
      n2 = parseInt(appVersion[i], 10) || 0;
      if (n1 > n2) return -1;
      if (n1 < n2) return 1;
    }
    return 0;
  }
  return ZaloPay;
});
